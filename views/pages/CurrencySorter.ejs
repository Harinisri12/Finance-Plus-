<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Currency Sorter - Finance Plus+</title>
  <link rel="stylesheet" href="/styles/style.css" type="text/css" />
  <link rel="stylesheet" href="/styles/nav.css" type="text/css" />
  <script src="https://kit.fontawesome.com/43c1b0f304.js" crossorigin="anonymous"></script>
</head>
<body>
 <%# Import nav %>
		<header>
			<%- include('../partials/nav') %>
		</header>
  
  
  <main>
    <div class="cam">
      <h1>Currency Sorter</h1>
      <div class="camDisplay" id="webcam-container"></div>
      <div class="labelContainer" id="label-container"></div>
      <button type="button" onclick="init()" class="buttonPrimary" id="startBtn">Start</button>
    </div>
  </main>

  <footer>
    <!-- Import Footer -->
    <!-- Assuming the footer is included from another file -->
    <!-- <%- include('../partials/footer') %> -->
  </footer>
  
  <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@latest/dist/tf.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@teachablemachine/image@latest/dist/teachablemachine-image.min.js"></script>
  
  <script type="text/javascript">
    // the link to your model provided by Teachable Machine export panel
    const URL = "https://teachablemachine.withgoogle.com/models/xCqRBxNgw/";
    let model, webcam, labelContainer, maxPredictions;

    // Load the image model and setup the webcam
    async function init() {
      const modelURL = URL + "model.json";
      const metadataURL = URL + "metadata.json";

      // load the model and metadata
      model = await tmImage.load(modelURL, metadataURL);
      maxPredictions = model.getTotalClasses();

      // Convenience function to setup a webcam
      const flip = true; // whether to flip the webcam
      webcam = new tmImage.Webcam(200, 200, flip); // width, height, flip
      await webcam.setup(); // request access to the webcam
      await webcam.play();
      window.requestAnimationFrame(loop);

      // append elements to the DOM
      document.getElementById("webcam-container").appendChild(webcam.canvas);
      labelContainer = document.getElementById("label-container");
      for (let i = 0; i < maxPredictions; i++) {
        // and class labels
        labelContainer.appendChild(document.createElement("div"));
      }
    }

    async function loop() {
      webcam.update(); // update the webcam frame
      await predict();
      window.requestAnimationFrame(loop);
    }

    async function predict() {
      // predict can take in an image, video, or canvas html element
      const prediction = await model.predict(webcam.canvas);

      // Find the currency class with the highest probability
      let maxProbability = 0;
      let maxCurrencyIndex = 0;
      for (let i = 0; i < maxPredictions; i++) {
        const probability = prediction[i].probability.toFixed(3);
        if (probability > maxProbability) {
          maxProbability = probability;
          maxCurrencyIndex = i;
        }
      }

      // Get the currency name and prediction percentage for the highest probability class
      const currencyName = prediction[maxCurrencyIndex].className;
      const percentage = (maxProbability * 100).toFixed(2);

      // Display the currency name and prediction percentage in the label container
      const classPrediction = `${currencyName}: ${percentage}%`;
      labelContainer.childNodes[maxCurrencyIndex].innerHTML = classPrediction;

      // Speak the currency name with the highest probability
      const speechText = `Showing amount is ${currencyName} Rs.`;
      speak(speechText);
    }

    // Function to convert text to speech
    function speak(text) {
      const speechSynthesis = window.speechSynthesis;
      const speechUtterance = new SpeechSynthesisUtterance(text);
      speechSynthesis.speak(speechUtterance);
    }
  </script>
   		<footer>
			<%- include('../partials/footer') %>
		</footer>
</body>
</html>
